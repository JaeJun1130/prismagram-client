[{"D:\\prismagram-client\\src\\index.js":"1","D:\\prismagram-client\\src\\Apollo\\Client.js":"2","D:\\prismagram-client\\src\\Components\\App.js":"3","D:\\prismagram-client\\src\\Components\\Footer.js":"4","D:\\prismagram-client\\src\\Styles\\GlobalStyles.js":"5","D:\\prismagram-client\\src\\Components\\Router.js":"6","D:\\prismagram-client\\src\\Styles\\Theme.js":"7","D:\\prismagram-client\\src\\Routes\\Feed\\index.js":"8","D:\\prismagram-client\\src\\Routes\\Auth\\index.js":"9","D:\\prismagram-client\\src\\Routes\\Feed\\FeedContainer.js":"10","D:\\prismagram-client\\src\\Routes\\Auth\\AuthContainer.js":"11","D:\\prismagram-client\\src\\Routes\\Feed\\FeedPresenter.js":"12","D:\\prismagram-client\\src\\Routes\\Auth\\AuthMutation.js":"13","D:\\prismagram-client\\src\\Routes\\Auth\\AuthPresenter.js":"14","D:\\prismagram-client\\src\\Components\\Logo.js":"15","D:\\prismagram-client\\src\\Components\\Button.js":"16","D:\\prismagram-client\\src\\Components\\Input.js":"17","D:\\prismagram-client\\src\\Components\\Header.js":"18","D:\\prismagram-client\\src\\Components\\Icons.js":"19"},{"size":323,"mtime":1609859411509,"results":"20","hashOfConfig":"21"},{"size":602,"mtime":1610132168505,"results":"22","hashOfConfig":"21"},{"size":1606,"mtime":1610289636229,"results":"23","hashOfConfig":"21"},{"size":2012,"mtime":1609859529795,"results":"24","hashOfConfig":"21"},{"size":758,"mtime":1610288919156,"results":"25","hashOfConfig":"21"},{"size":679,"mtime":1610289556029,"results":"26","hashOfConfig":"21"},{"size":546,"mtime":1610287825858,"results":"27","hashOfConfig":"21"},{"size":79,"mtime":1609700197287,"results":"28","hashOfConfig":"21"},{"size":79,"mtime":1609699330489,"results":"29","hashOfConfig":"21"},{"size":175,"mtime":1609700287933,"results":"30","hashOfConfig":"21"},{"size":5186,"mtime":1610164426825,"results":"31","hashOfConfig":"21"},{"size":174,"mtime":1610169559753,"results":"32","hashOfConfig":"21"},{"size":694,"mtime":1610163486289,"results":"33","hashOfConfig":"21"},{"size":5876,"mtime":1610131913836,"results":"34","hashOfConfig":"21"},{"size":386,"mtime":1609941508369,"results":"35","hashOfConfig":"21"},{"size":505,"mtime":1609944151053,"results":"36","hashOfConfig":"21"},{"size":782,"mtime":1610301836526,"results":"37","hashOfConfig":"21"},{"size":3094,"mtime":1610303960357,"results":"38","hashOfConfig":"21"},{"size":4363,"mtime":1610303615031,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"tljhkq",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\prismagram-client\\src\\index.js",[],["80","81"],"D:\\prismagram-client\\src\\Apollo\\Client.js",[],"D:\\prismagram-client\\src\\Components\\App.js",[],"D:\\prismagram-client\\src\\Components\\Footer.js",[],"D:\\prismagram-client\\src\\Styles\\GlobalStyles.js",[],"D:\\prismagram-client\\src\\Components\\Router.js",["82"],"D:\\prismagram-client\\src\\Styles\\Theme.js",[],"D:\\prismagram-client\\src\\Routes\\Feed\\index.js",[],"D:\\prismagram-client\\src\\Routes\\Auth\\index.js",[],"D:\\prismagram-client\\src\\Routes\\Feed\\FeedContainer.js",[],"D:\\prismagram-client\\src\\Routes\\Auth\\AuthContainer.js",["83"],"import React, { useState } from \"react\";\r\nimport AuthPresenter from \"./AuthPresenter\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CONFIRM_SECERT, CREATE_ACCOUNT, LOG_IN } from \"./AuthMutation\";\r\n\r\nimport { toast } from \"react-toastify\";\r\n\r\nexport const LOGIN = \"LOGIN\";\r\nexport const JOIN = \"JOIN\";\r\nexport const SECRET = \"SECRET\";\r\n\r\nconst AuthContainer = () => {\r\n    //폼\r\n    const [action, setAction] = useState(LOGIN);\r\n    //로그인\r\n    const [userData, setUserData] = useState({\r\n        email: \"\",\r\n    });\r\n    //회원가입\r\n    const [joinData, setJoinData] = useState({\r\n        username: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n    });\r\n    const [userSecret, setUserSecret] = useState({\r\n        secret: \"\",\r\n    });\r\n\r\n    //로그인 gql\r\n    const [requestSecretMutation] = useMutation(LOG_IN, {\r\n        variables: {\r\n            email: userData.email,\r\n        },\r\n    });\r\n    //회원가입 gql\r\n    const [createAccountMutation] = useMutation(CREATE_ACCOUNT, {\r\n        variables: {\r\n            username: joinData.username,\r\n            firstName: joinData.firstName,\r\n            lastName: joinData.lastName,\r\n            email: joinData.email,\r\n        },\r\n    });\r\n    //시크릿 gql\r\n    const [confirmSecretMutation] = useMutation(CONFIRM_SECERT, {\r\n        variables: {\r\n            email: userData.email,\r\n            secret: userSecret.secret,\r\n        },\r\n    });\r\n\r\n    //서버통신\r\n    const onSubmit = async (e, form) => {\r\n        const a = userData.email.includes(\"@\");\r\n        const aa = joinData.email.includes(\"@\");\r\n        console.log(e, form);\r\n        e.preventDefault();\r\n\r\n        switch (form) {\r\n            //로그인\r\n            case LOGIN:\r\n                if (userData.email !== \"\") {\r\n                    try {\r\n                        const {\r\n                            data: { requestSecret },\r\n                        } = await requestSecretMutation();\r\n                        if (!requestSecret || !a) {\r\n                            toast.error(\"이메일을 다시 확인하세요\");\r\n                        } else if (requestSecret && a) {\r\n                            toast.success(\"메일이 전송 되었습니다.\");\r\n                            setTimeout(() => {\r\n                                setAction(SECRET);\r\n                            }, 2000);\r\n                        }\r\n                    } catch {\r\n                        toast.error(\"지금은 로그인 할 수 없습니다\");\r\n                    }\r\n                } else {\r\n                    toast.error(\"이메일을 입력하세요\");\r\n                }\r\n                break;\r\n\r\n            //회원가입\r\n            case JOIN: {\r\n                if (\r\n                    joinData.email !== \"\" &&\r\n                    joinData.firstName !== \"\" &&\r\n                    joinData.username !== \"\" &&\r\n                    joinData.lastName\r\n                ) {\r\n                    try {\r\n                        const {\r\n                            data: { createAccount },\r\n                        } = await createAccountMutation();\r\n                        if (!createAccount || !aa) {\r\n                            toast.error(\"회원정보를 다시 입력하세요\");\r\n                        } else if (createAccount && aa) {\r\n                            toast.success(\"회원가입 완료\");\r\n                        }\r\n                    } catch {\r\n                        toast.error(\"회원가입을 할 수 없습니다, 다시 시도하세요\");\r\n                    }\r\n                } else {\r\n                    toast.error(\"모든항목을 입력하세요\");\r\n                }\r\n\r\n                break;\r\n            }\r\n            case SECRET: {\r\n                if (userSecret.secert !== \"\") {\r\n                    try {\r\n                        const {\r\n                            data: { confirmSecret: token },\r\n                        } = await confirmSecretMutation();\r\n                        console.log(token);\r\n\r\n                        if (token) {\r\n                            localStorage.setItem(\"token\", token);\r\n                            window.location.reload();\r\n                        } else {\r\n                            console.log(\"실패\");\r\n                            localStorage.removeItem(\"token\");\r\n                        }\r\n                    } catch {\r\n                        toast.error(\"암호가 일치하지 않습니다\");\r\n                        localStorage.removeItem(\"token\");\r\n                    }\r\n                } else {\r\n                    toast.error(\"암호를 입력하세요\");\r\n                    localStorage.removeItem(\"token\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <AuthPresenter\r\n            action={action}\r\n            setAction={setAction}\r\n            userData={userData}\r\n            setUserData={setUserData}\r\n            joinData={joinData}\r\n            setJoinData={setJoinData}\r\n            onSubmit={onSubmit}\r\n            userSecret={userSecret}\r\n            setUserSecret={setUserSecret}\r\n        />\r\n    );\r\n};\r\n\r\nexport default AuthContainer;\r\n","D:\\prismagram-client\\src\\Routes\\Feed\\FeedPresenter.js",[],"D:\\prismagram-client\\src\\Routes\\Auth\\AuthMutation.js",[],"D:\\prismagram-client\\src\\Routes\\Auth\\AuthPresenter.js",[],"D:\\prismagram-client\\src\\Components\\Logo.js",[],"D:\\prismagram-client\\src\\Components\\Button.js",[],"D:\\prismagram-client\\src\\Components\\Input.js",[],"D:\\prismagram-client\\src\\Components\\Header.js",[],"D:\\prismagram-client\\src\\Components\\Icons.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":27,"nodeType":"90","messageId":"91","endLine":2,"endColumn":33},{"ruleId":"92","severity":1,"message":"93","line":60,"column":9,"nodeType":"94","messageId":"95","endLine":134,"endColumn":10},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]